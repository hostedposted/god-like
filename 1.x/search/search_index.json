{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Normally when I work on a web server I use express with JavaScript instead of flask with Python. Even though I like python, I don't like flask. Express is a great tool for web development, it's in JavaScript though. So I decided to write a version of express in Python. I came up with the name \"god-like\" because of how god like it would be to use express in Python. Lets see how it works. from god_like import GodLike app = GodLike() @app.post(\"/\") def index(req, res): res.send(f\"The body is {req.body}\") app.listen(port=8080) Flask equivalent: from flask import Flask, request app = Flask(__name__) @app.route(\"/\", methods[\"POST\"]) def index(): return f\"The body is {request.data.decode('utf-8')}\" app.run(port=8080)","title":"Home"},{"location":"#home","text":"Normally when I work on a web server I use express with JavaScript instead of flask with Python. Even though I like python, I don't like flask. Express is a great tool for web development, it's in JavaScript though. So I decided to write a version of express in Python. I came up with the name \"god-like\" because of how god like it would be to use express in Python. Lets see how it works. from god_like import GodLike app = GodLike() @app.post(\"/\") def index(req, res): res.send(f\"The body is {req.body}\") app.listen(port=8080) Flask equivalent: from flask import Flask, request app = Flask(__name__) @app.route(\"/\", methods[\"POST\"]) def index(): return f\"The body is {request.data.decode('utf-8')}\" app.run(port=8080)","title":"Home"},{"location":"api/api/","text":"1.x API god_like.GodLike(app = None) Creates a GodLike application. Takes an optional app argument that should be a Flask application instance, if it is not passed a Flask application will be created. from god_like import GodLike app = GodLike()","title":"API reference"},{"location":"api/api/#1x-api","text":"","title":"1.x API"},{"location":"api/api/#god_likegodlikeapp-none","text":"Creates a GodLike application. Takes an optional app argument that should be a Flask application instance, if it is not passed a Flask application will be created. from god_like import GodLike app = GodLike()","title":"god_like.GodLike(app = None)"},{"location":"api/request/","text":"Request The req object represents the HTTP request that was sent to the server. For example: @app.get(\"/user/<id>\") def get_user(req, res): res.send(req.params[\"id\"]) The req object is an enhanced version of the flask.Request object. You can access the flask request object by getting the _flask_request attribute of the req object. Properties req.body Contains a string with the body of the request. The string is empty if the request has no body. import json from god_like import GodLike app = GodLike() @app.post(\"/profile/\") def profile(req, res): body = json.loads(req.body) print(body[\"name\"]) res.send(body) req.cookies This property contains a dictionary with the cookies that were sent with the request. If the request has no cookies, this property is an empty dictionary. # Cookie: name=godlike print(req.cookies[\"name\"]) # => godlike req.headers This property contains a dictionary with the headers that were sent with the request. If the request has no headers, this property is an empty dictionary. # Header: Accept-Language: en-US print(req.headers[\"Accept-Language\"]) # => en-US req.host Contains the hostname derived from the Host HTTP header. Aliased as req.hostname . # Header: Host: example.com:3000 print(req.host) # => example.com req.ip Contains the remote IP address of the request. print(req.ip) # => \"127.0.0.1\" req.method Contains a string corresponding to the HTTP method of the request: GET , POST , PUT , and so on. req.params This property contains a dictionary with the query that were sent in the url. @app.get(\"/user/<id>\") def get_user(req, res): res.send(req.params[\"id\"]) req.path Contains the path part of the request URL. # example.com/users?sort=desc print(req.path) # => \"/users\" req.protocol Contains the request protocol string: either http or (for TLS requests) https. print(req.protocol) req.query This property is an object containing a property for each query string parameter in the route. req.route The currently-matched route, a string. For example: @app.get(\"/user/<id>\") def get_user(req, res): print(req.route) # => \"/user/<id>\" res.send(req.route) req.secure A Boolean property that is true if a TLS connection is established. Equivalent to: req.protocol == \"https\" req.subdomains An array of subdomains in the domain name of the request. # Host: \"tobi.ferrets.example.com\" print(req.subdomains) # => [\"ferrets\", \"tobi\"] req.url The url of the request. Methods req.accepts(media_type) Checks if the specified content type is acceptable, based on the request\u2019s Accept HTTP header field. The method returns True if the content type matches, or if the specified content type is not acceptable, returns False (in which case, the application should respond with 406 \"Not Acceptable\" ). The media_type value may be a single MIME type string (such as application/json ) or an extension name such as json . # Accept: text/html req.accepts(\"html\") # => True # Accept: text/*, application/json req.accepts(\"html\") # => True req.accepts(\"text/html\") # => True req.accepts(\"application/json\") # => True # Accept: text/*, application/json req.accepts(\"image/png\") req.accepts(\"png\") # => False req.accepts_charset(charset) Returns True if the charset is accepted, based on the request\u2019s Accept-Charset HTTP header field. If the specified charset is not accepted, returns False . req.accepts_encoding(encoding) Returns True if the specified encoding is accepted, based on the request\u2019s Accept-Encoding HTTP header field. If the specified encoding is not accepted, returns False . req.accepts_language(language) Returns True if the specified language is accepted, based on the request\u2019s Accept-Language HTTP header field. If the specified language is not accepted, returns False . req.get(field) Returns the specified HTTP request header field (case-insensitive match). req.get(\"Content-Type\") # => \"text/plain\" req.get(\"content-type\") # => \"text/plain\" req.get(\"Something\") # => None","title":"Request"},{"location":"api/request/#request","text":"The req object represents the HTTP request that was sent to the server. For example: @app.get(\"/user/<id>\") def get_user(req, res): res.send(req.params[\"id\"]) The req object is an enhanced version of the flask.Request object. You can access the flask request object by getting the _flask_request attribute of the req object.","title":"Request"},{"location":"api/request/#properties","text":"","title":"Properties"},{"location":"api/request/#reqbody","text":"Contains a string with the body of the request. The string is empty if the request has no body. import json from god_like import GodLike app = GodLike() @app.post(\"/profile/\") def profile(req, res): body = json.loads(req.body) print(body[\"name\"]) res.send(body)","title":"req.body"},{"location":"api/request/#reqcookies","text":"This property contains a dictionary with the cookies that were sent with the request. If the request has no cookies, this property is an empty dictionary. # Cookie: name=godlike print(req.cookies[\"name\"]) # => godlike","title":"req.cookies"},{"location":"api/request/#reqheaders","text":"This property contains a dictionary with the headers that were sent with the request. If the request has no headers, this property is an empty dictionary. # Header: Accept-Language: en-US print(req.headers[\"Accept-Language\"]) # => en-US","title":"req.headers"},{"location":"api/request/#reqhost","text":"Contains the hostname derived from the Host HTTP header. Aliased as req.hostname . # Header: Host: example.com:3000 print(req.host) # => example.com","title":"req.host"},{"location":"api/request/#reqip","text":"Contains the remote IP address of the request. print(req.ip) # => \"127.0.0.1\"","title":"req.ip"},{"location":"api/request/#reqmethod","text":"Contains a string corresponding to the HTTP method of the request: GET , POST , PUT , and so on.","title":"req.method"},{"location":"api/request/#reqparams","text":"This property contains a dictionary with the query that were sent in the url. @app.get(\"/user/<id>\") def get_user(req, res): res.send(req.params[\"id\"])","title":"req.params"},{"location":"api/request/#reqpath","text":"Contains the path part of the request URL. # example.com/users?sort=desc print(req.path) # => \"/users\"","title":"req.path"},{"location":"api/request/#reqprotocol","text":"Contains the request protocol string: either http or (for TLS requests) https. print(req.protocol)","title":"req.protocol"},{"location":"api/request/#reqquery","text":"This property is an object containing a property for each query string parameter in the route.","title":"req.query"},{"location":"api/request/#reqroute","text":"The currently-matched route, a string. For example: @app.get(\"/user/<id>\") def get_user(req, res): print(req.route) # => \"/user/<id>\" res.send(req.route)","title":"req.route"},{"location":"api/request/#reqsecure","text":"A Boolean property that is true if a TLS connection is established. Equivalent to: req.protocol == \"https\"","title":"req.secure"},{"location":"api/request/#reqsubdomains","text":"An array of subdomains in the domain name of the request. # Host: \"tobi.ferrets.example.com\" print(req.subdomains) # => [\"ferrets\", \"tobi\"]","title":"req.subdomains"},{"location":"api/request/#requrl","text":"The url of the request.","title":"req.url"},{"location":"api/request/#methods","text":"","title":"Methods"},{"location":"api/request/#reqacceptsmedia_type","text":"Checks if the specified content type is acceptable, based on the request\u2019s Accept HTTP header field. The method returns True if the content type matches, or if the specified content type is not acceptable, returns False (in which case, the application should respond with 406 \"Not Acceptable\" ). The media_type value may be a single MIME type string (such as application/json ) or an extension name such as json . # Accept: text/html req.accepts(\"html\") # => True # Accept: text/*, application/json req.accepts(\"html\") # => True req.accepts(\"text/html\") # => True req.accepts(\"application/json\") # => True # Accept: text/*, application/json req.accepts(\"image/png\") req.accepts(\"png\") # => False","title":"req.accepts(media_type)"},{"location":"api/request/#reqaccepts_charsetcharset","text":"Returns True if the charset is accepted, based on the request\u2019s Accept-Charset HTTP header field. If the specified charset is not accepted, returns False .","title":"req.accepts_charset(charset)"},{"location":"api/request/#reqaccepts_encodingencoding","text":"Returns True if the specified encoding is accepted, based on the request\u2019s Accept-Encoding HTTP header field. If the specified encoding is not accepted, returns False .","title":"req.accepts_encoding(encoding)"},{"location":"api/request/#reqaccepts_languagelanguage","text":"Returns True if the specified language is accepted, based on the request\u2019s Accept-Language HTTP header field. If the specified language is not accepted, returns False .","title":"req.accepts_language(language)"},{"location":"api/request/#reqgetfield","text":"Returns the specified HTTP request header field (case-insensitive match). req.get(\"Content-Type\") # => \"text/plain\" req.get(\"content-type\") # => \"text/plain\" req.get(\"Something\") # => None","title":"req.get(field)"},{"location":"api/response/","text":"Response The res object represents the HTTP response that a GodLike app sends when it gets an HTTP request. For example: @app.get(\"/user/<id>\") def get_user(req, res): res.send(req.params[\"id\"]) The res object is an enhanced version of flask.Response object. You can access the flask response object by getting the flask_response attribute of the res object. Properties res.flask_response The flask.Response object that the res object wraps. Methods res.content_type(content_type) Sets the Content-Type HTTP header to the MIME type as determined by the specified type. If type contains the / character, then it sets the Content-Type to the exact value of type , otherwise it is assumed to be a file extension and the MIME type is looked up in a mapping using the mimetypes.types_map.get method. res.content_type(\".html\") res.content_type(\"html\") res.content_type(\"json\") res.content_type(\"application/json\") res.content_type(\"png\") res.download(path, filename = None) Transfers the file at path as an \"attachment\". Typically, browsers will prompt the user for download. By default, the Content-Disposition header \"filename=\" parameter is path (this typically appears in the browser dialog). Override this default with the filename parameter. This method uses res.send_file() to transfer the file. res.download(\"file.pdf\") res.download(\"random_file.pdf\", filename=\"file.pdf\") res.get(field) Returns the HTTP response header specified by field . The match is case-insensitive. res.get(\"Content-Type\") res.json(obj) Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a JSON string using json.dumps . The parameter can be any JSON type, including dictionary, list, string, boolean, int or float, and you can also use it to convert other values to JSON. res.json(None) res.json({\"user\": \"tobi\"}) res.status(500).json({ \"error\": \"message\" }) res.redirect(path) Redirects to the URL derived from the specified path. res.redirect(\"/foo/bar\") res.redirect(\"http://example.com\") res.redirect(\"../login\") res.send(body) Sends the HTTP response. The body parameter can be a string, list, dict, tuple, int, float, bool. For example: res.send({ \"some\": \"json\" }) res.send(\"<p>some html</p>\") res.status(404).send(\"Sorry, we cannot find that!\") res.status(500).send({ \"error\": \"something blew up\" }) res.send_file(file_path) Transfers the file at the given path. Sets the Content-Type response HTTP header field based on the filename's extension. res.send_file(\"file.pdf\") res.send_status(code) Sets the response HTTP status code to code and sends the registered status message as the text response body. If an unknown status code is specified, the response body will just be the code number. res.sendStatus(404) res.set_header(fields) Sets the response's HTTP headers field to value. res.set_header({ \"Content-Type\": \"text/plain\", \"Content-Length\": \"123\", \"ETag\": \"12345\" }) res.status(code) Sets the HTTP status for the response. res.status(400).send(\"Bad Request\") res.status(404).send_file(\"/absolute/path/to/404.png\")","title":"Response"},{"location":"api/response/#response","text":"The res object represents the HTTP response that a GodLike app sends when it gets an HTTP request. For example: @app.get(\"/user/<id>\") def get_user(req, res): res.send(req.params[\"id\"]) The res object is an enhanced version of flask.Response object. You can access the flask response object by getting the flask_response attribute of the res object.","title":"Response"},{"location":"api/response/#properties","text":"","title":"Properties"},{"location":"api/response/#resflask_response","text":"The flask.Response object that the res object wraps.","title":"res.flask_response"},{"location":"api/response/#methods","text":"","title":"Methods"},{"location":"api/response/#rescontent_typecontent_type","text":"Sets the Content-Type HTTP header to the MIME type as determined by the specified type. If type contains the / character, then it sets the Content-Type to the exact value of type , otherwise it is assumed to be a file extension and the MIME type is looked up in a mapping using the mimetypes.types_map.get method. res.content_type(\".html\") res.content_type(\"html\") res.content_type(\"json\") res.content_type(\"application/json\") res.content_type(\"png\")","title":"res.content_type(content_type)"},{"location":"api/response/#resdownloadpath-filename-none","text":"Transfers the file at path as an \"attachment\". Typically, browsers will prompt the user for download. By default, the Content-Disposition header \"filename=\" parameter is path (this typically appears in the browser dialog). Override this default with the filename parameter. This method uses res.send_file() to transfer the file. res.download(\"file.pdf\") res.download(\"random_file.pdf\", filename=\"file.pdf\")","title":"res.download(path, filename = None)"},{"location":"api/response/#resgetfield","text":"Returns the HTTP response header specified by field . The match is case-insensitive. res.get(\"Content-Type\")","title":"res.get(field)"},{"location":"api/response/#resjsonobj","text":"Sends a JSON response. This method sends a response (with the correct content-type) that is the parameter converted to a JSON string using json.dumps . The parameter can be any JSON type, including dictionary, list, string, boolean, int or float, and you can also use it to convert other values to JSON. res.json(None) res.json({\"user\": \"tobi\"}) res.status(500).json({ \"error\": \"message\" })","title":"res.json(obj)"},{"location":"api/response/#resredirectpath","text":"Redirects to the URL derived from the specified path. res.redirect(\"/foo/bar\") res.redirect(\"http://example.com\") res.redirect(\"../login\")","title":"res.redirect(path)"},{"location":"api/response/#ressendbody","text":"Sends the HTTP response. The body parameter can be a string, list, dict, tuple, int, float, bool. For example: res.send({ \"some\": \"json\" }) res.send(\"<p>some html</p>\") res.status(404).send(\"Sorry, we cannot find that!\") res.status(500).send({ \"error\": \"something blew up\" })","title":"res.send(body)"},{"location":"api/response/#ressend_filefile_path","text":"Transfers the file at the given path. Sets the Content-Type response HTTP header field based on the filename's extension. res.send_file(\"file.pdf\")","title":"res.send_file(file_path)"},{"location":"api/response/#ressend_statuscode","text":"Sets the response HTTP status code to code and sends the registered status message as the text response body. If an unknown status code is specified, the response body will just be the code number. res.sendStatus(404)","title":"res.send_status(code)"},{"location":"api/response/#resset_headerfields","text":"Sets the response's HTTP headers field to value. res.set_header({ \"Content-Type\": \"text/plain\", \"Content-Length\": \"123\", \"ETag\": \"12345\" })","title":"res.set_header(fields)"},{"location":"api/response/#resstatuscode","text":"Sets the HTTP status for the response. res.status(400).send(\"Bad Request\") res.status(404).send_file(\"/absolute/path/to/404.png\")","title":"res.status(code)"}]}